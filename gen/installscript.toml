# 言語インストールスクリプト
#
# 言語をインストールするためのスクリプトをTOML形式で記述していただきます
# 各キー/値ごとにコメントで
#   キー: キー名
#   型:   そのキーに対する値の型
#   要否: そのキーが必須であるか任意であるか
#   説明: そのキーの説明
#   例:   そのキーの値として指定するものの例
# が記述してあるので、 必須 の項目については必ず記述してください
# 直後にそのキー/値の例が記述してあるので参考にしてください
#
# 実行環境は以下の通りとなっています
#
#   OS:                   Ubuntu 24.04.1
#   カレントディレクトリ: /judge
#   環境変数:             HOME=/home/runner
#                         LANG=C.UTF-8
#                         PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
#                         ATCODER=1

# キー: language
# 型:   文字列
# 要否: 必須
# 説明: プログラミング言語の名前
# 例:   'C'
#       'C++'
#       'Java'
#       'Python3'
language = 'lang'

# キー: name
# 型:   文字列
# 要否: 必須
# 説明: コンパイラ/インタプリタの名前
#       コンパイラ、インタプリタの実装名を記述してください
# 例:   'GCC'
#       'Clang'
#       'OpenJDK'
name = 'compiler'

# キー: version
# 型:   文字列
# 要否: 必須
# 説明: コンパイラ/インタプリタのバージョン番号
#       コンパイラ、インタプリタの実装バージョンを記述してください
# 例:   '14.2'
#       '18.1.8'
#       '23'
version = 'v1.2.3-alpha'

# キー: license
# 型:   配列
#       配列内の各要素はテーブルで、1要素が1つのライセンス
#       テーブルに記述するキー/値は以下の通り
#           キー: url
#           型:   文字列
#           要否: 必須
#           説明: ライセンスが確認できるURL
#           例:   'https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=COPYING3;hb=refs/heads/master'
#                 'https://github.com/llvm/llvm-project/blob/main/clang/LICENSE.TXT'
#                 'https://openjdk.org/legal/gplv2+ce.html'
#
#           キー: name
#           型:   文字列
#           要否: 必須
#           説明: ライセンス名
#                 https://spdx.org/licenses/ にある Identifier で記述してください
#                 ライセンスを記述するうえで例外規定を含む場合は後述の `exception` に分けて記述してください
#                 つまりこの項目では `WITH` を使った書き方はしないでください
#                 上記リストにないライセンスの場合は問い合わせをしてください
#           例:   'GPL-3.0-and-later'
#                 'Apache-2.0'
#                 'GPL-2.0-only'
#
#           キー: exception
#           型:   文字列
#           要否: 任意
#           説明: ライセンスの例外規定名
#                 ライセンスにおける例外規定を https://spdx.org/licenses/exceptions-index.html にある Identifier で記述してください
#                 この項目は任意項目となっていますがライセンスに例外規定がある場合は必須です
#                 任意となっているのは例外規定がない場合に書く内容がないためであり、例外規定を書かなくていいという意味ではありません
#                 上記リストにないライセンスの場合は問い合わせをしてください
#           例:   'GCC-exception-3.1'
#                 'LLVM-exception'
#                 'Classpath-exception-2.0'
# 要否: 必須
# 説明: コンパイラ/インタプリタのライセンス
#       コンパイラ、インタプリタの実装のライセンスを記述してください
#       デュアルライセンスなど、ライセンスが複数ある場合はすべて記述してください
license = [
    { name = 'GPL-3.0-only', url = 'https://example.com/compiler-license' },
]

# キー: library
# 型:   テーブル
#       テーブル内の各キー/値はライブラリ1つを表し、キーにはライブラリ名を、値はテーブル型でライブラリの詳細を記述
#       ライブラリの詳細として記述できるキー/値は以下の通り
#           キー: license
#           型:   テーブルの配列
#                 ここに記述する型/値は上記 `license` と同様なのでそちらを参照
#           要否: 必須
#           説明: ライブラリのライセンス
#
#           キー: indirect
#           型:   ブール値
#           要否: 任意
#           説明: 間接的にインストールされるライブラリかどうか
#                 他ライブラリから依存されてインストールされるライブラリである場合にこのキーの値に `true` を指定してください
#                 このキー/値が設定されなかった場合のデフォルト値は `false` で、直接的にインストールするライブラリであることを表します
#                 このキーが存在する理由は、直接インストールされるライブラリが依存しているライブラリのライセンスを明示するためにあります
#                 つまり使用したいライブラリが依存しているライブラリもライセンス的に使用できることを明示するために存在し、これが `true` にされたライブラリはインストールされたライブラリ一覧としては表示されません
#
#           キー: version
#           型:   文字列
#           要否: 任意
#           説明: ライブラリのバージョン番号
#
#       `indirect` のとおり、間接的に使用されるライブラリのライセンスもできるだけ記述してください
#       バージョンに関してはコンパイラ/インタプリタと違い任意であるが、ユーザが確認できなくなるためどうしてもわからない場合などを除き記述すること
# 要否: 任意
# 説明: 追加でインストールされるライブラリ一覧
#       ここに記述されたものは言語一覧などの表示に使用されるものでありインストールなどには影響しません
#       そのためインストールスクリプトで記述されるものと一致するようにしてください
# 例:   boost = { license = [ { name = 'Boost Software License', url = 'https://www.boost.org/LICENSE_1_0.txt' } ], version = '1.86.0' }
library.LIB-a = { license = [
    { name = 'Apache-2.0', url = 'https://example.com/liba-license' },
], version = 'v0.1.2' }
library.LIB-b = { license = [
    { name = 'BSD-3-Clause', url = 'https://example.com/libb/license' },
    { name = 'MIT', url = 'https://example.jp/library/c/license' },
], indirect = true, version = 'v1.0.0' }
library.LIB-c = { license = [
    { name = 'LGPL-3.0-only', url = 'https://example.jp/library/c/license' },
] }

# キー: filename
# 型:   文字列
# 要否: 必須
# 説明: 配置するファイル名
#       提出されたソースコードがこの名前でカレントディレクトリに作成されます
#       基本的には Main + 拡張子 で統一してください
#       ただしファイル名に意味がある場合やプロジェクトファイルを用いる場合は適切にファイルパスを指定してください
# 例:   'Main.c'
#       'Main.cpp'
#       'src/main.rs'
filename = 'Main.ext'

# キー: install
# 型:   文字列
# 要否: 必須
# 説明: インストールスクリプト
#       このスクリプトでは言語環境のイメージを作成するために使用されます
#       そのためコンパイラ/インタプリタやライブラリのインストールだけでなく、プロジェクトの生成やプリコンパイルといった、提出によらずにすべてで行うべき工程はこのインストールスクリプトで行ってください
#       ネットワークアクセスができるのはこのタイミングだけです
#       後述のコンパイルスクリプト、および実行コマンドではネットワークアクセスができないため、必要なファイルがインターネットにある場合はこのスクリプトでダウンロードを行っておいてください
#
#       ここで記述されたスクリプトはbashに渡されて実行されます
#       シェル変数などは通常通り使用可能ですが、コンパイルスクリプト、実行コマンドには引き継がれないので注意してください
#       コンパイルスクリプトにおいては同様にbashで実行されるため、同じ内容を記述してください
#       実行コマンドはシェルを介さず直接起動されるため、環境変数の修正が必要な場合は後述のenvironmentを使用してください
#
#       またイメージを最小化するために、インストール作業には必要だが最終成果物として不要なものは /tmp においてください
#       インストールスクリプトが終了したあとで /tmp 以下のものは削除されます
install = '''
sudo apt install -y COMPILER=1.2.3-alpha
COMPILER new code
cd code
COMPILER add LIB-a@v0.1.2 LIB-b@v1.0.0 LIB-c

cd /tmp
wget -O foo.tgz https://example.com/foo
tar xvf foo.tgz
./foo/install
'''

# キー: compile
# 型:   文字列
# 要否: 任意
# 説明: コンパイルスクリプト
#       コンパイルを行う言語の場合はコンパイルコマンドを記入してください
#
#       ここで記述されたスクリプトはbashに渡されて実行されます
#       シェル変数などは通常通り使用可能ですが、実行コマンドには引き継がれないので注意してください
#       実行コマンドはシェルを介さず直接起動されるため、環境変数の修正が必要な場合は後述のenvironmentを使用してください
#
#       コンパイルを行わない言語の場合は記述不要です
#       ただしコンパイルを行う必要のない言語の場合でも、構文チェックなどをコンパイル代わりに行わせることが可能です
#       成功時に後述の object で指定するファイルが生成されるようにコマンドを記述してください
compile = '''
mv Main.ext code/src/main.ext
cd code
COMPILER build --arg1 --arg2 opt
mv build/release.out ../a.out
'''

# キー: object
# 型:   文字列
# 要否: 任意
# 説明: コンパイル成否を判断するためのファイルパス
#       コンパイルが成功したかどうかの判定に行うファイルを/judgeからの相対パスで記入してください
#       コンパイルの成否はこのファイルの存在で判定を行います
#       コンパイラの出力内容や、コンパイラの終了コードでは判定を行いませんので注意してください
#       またこの仕様を用いて、インタプリタ言語で構文チェックなどを行うことが可能です
#       例えばコンパイルコマンドとして構文チェックを行い、その成否に応じてここで指定するファイルを生成する/しないを行えば、インタプリタ言語でもコンパイルエラーで実行を中断させることが可能です
# 例:   'a.out'
#       'publish/Main'
#       'target/release/main'
object = 'a.out'

# キー: environment
# 型:   テーブル
#       テーブル内の各キー/値は環境変数1つを表し、キーには環境変数名を、値は文字列型で環境変数の内容を記述
# 要否: 任意
# 説明: 実行時の環境変数
#       実行はシェルを介さず直接実行されるためシェルと同じ方法では環境変数を設定できません
#       そのため環境変数を修正する場合はenvironmentテーブル内にキー/値を記述してください
#
#       デフォルトでは以下の環境変数が設定されています
#           environment.PATH    = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
#           environment.HOME    = '/home/runner'
#           environment.LANG    = 'C.UTF-8'
#           environment.ATCODER = '1'
#
#       ここで指定する環境変数は実行時のみ影響するものです
#       インストールスクリプト、コンパイルスクリプトには影響しません
#       それぞれで環境変数を変更する場合はそれぞれのスクリプト内で直接変更するようにしてください
#
#       また以下の文字列は実行直前にジャッジシステムによって置換されます:
#           {memory:b}     問題のメモリ制限の数値（単位: バイト）
#           {memory:kb}    問題のメモリ制限の数値（単位: KiB）
#           {memory:mb}    問題のメモリ制限の数値（単位: MiB）
#       インタプリタ言語など、環境変数によって実行環境の設定を行う場合に使用できます
environment.HOGE       = "fuga"
environment.FOO        = "bar"
environment.max-memory = "{memory:mb}M"

# キー: execution
# 型:   配列
#       配列内の各要素は文字列で、実行コマンドとして渡される各引数
# 要否: 任意
# 説明: 実行コマンド
#       実行を行うときのコマンドを配列で指定してください
#       実行はオーバーヘッドを取り除くためにシェルなどを使わずに直接起動させます
#       そのためシェルの構文などは一切使えません
#       ただし以下の文字列は実行直前にジャッジシステムによって置換されます:
#           {memory:b}     問題のメモリ制限の数値（単位: バイト）
#           {memory:kb}    問題のメモリ制限の数値（単位: KiB）
#           {memory:mb}    問題のメモリ制限の数値（単位: MiB）
#       インタプリタ言語など、実行環境の設定を行う場合に使用できます
# 例:   [ './a.out' ]
#       [ './target/release/main' ]
#       [ 'java', '-Xss{memory:mb}M', 'Main' ]
execution = [
    'COMPILER',
    '--arg1',
    '--arg2',
    'opt',
    '--max-memory',
    '{memory:kb}K',
    'a.out',
]